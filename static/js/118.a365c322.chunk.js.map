{"version":3,"file":"static/js/118.a365c322.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/redux/selectors.js","components/Loader/Loader.jsx","components/ContactList/ContactList.jsx","components/Filter/Flter.styled.js","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { Form, Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const StyledFormik = styled(Form)`\n  margin-top: 50px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 320px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  background-color: ${p => p.theme.colors.lightBlue};\n  padding: 20px;\n  border: 1px solid ${p => p.theme.colors.blue};\n  border-radius: 5px;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  color: ${p => p.theme.colors.red};\n  margin-top: 5px;\n  display: block;\n`;\n\nexport const FormField = styled(Field)`\n  display: block;\n  padding: 5px 10px;\n  margin-top: 10px;\n  outline: none;\n`;\n\nexport const AddButton = styled.button`\n  text-transform: uppercase;\n  font-size: 12px;\n  font-weight: 700;\n  cursor: pointer;\n  width: 130px;\n  padding: 10px;\n  background-color: ${p => p.theme.colors.blue};\n  color: white; \n  border: 1px solid transparent;\n  border-radius: 4px;\n  transition: color 0.5s linear, background-color 0.3s linear, border-color 0.4s ease;\n  &:hover {\n    background-color: transparent;\n    color: ${p => p.theme.colors.blue}; \n    border-color: ${p => p.theme.colors.blue}; \n  }\n`;\n","\nimport { Formik } from 'formik';\nimport { StyledFormik,FormField,Error,AddButton } from './ContactForm.styled';\n\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../redux/contactsActions'\n\n\nconst contactSchema = Yup.object().shape({\n  name: Yup.string().min(3, 'Too Short!').required('Required'),\n  number: Yup.string().min(7, 'Must be 10 or more').required('Required'),\n});\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  \n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={contactSchema}\n      onSubmit={(values, actions) => {\n      dispatch(addContact(values));\n        actions.resetForm();\n      }}\n    >\n      <StyledFormik>\n        <label>\n          Name\n          <FormField name=\"name\" placeholder=\"Jane\" />\n          <Error name=\"name\" component=\"span\" />\n        </label>\n\n        <label>\n          Number\n          <FormField name=\"number\" type=\"number\" />\n          <Error name=\"number\" component=\"span\" />\n        </label>\n        <AddButton type=\"submit\">add contact</AddButton>\n      </StyledFormik>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\n\nexport const Wrapper = styled.div`\nmargin-top:50px;\n    display: flex;\n    justify-content: center;\n    align-items: center;`\nexport const List = styled.ul`\nwidth:370px;\nlist-style:none;\nmargin:0 auto;\n`\nexport const ListItem = styled.li`\ndisplay: flex;\njustify-content: space-between;\nalign-items: center;\nborder: 1px solid grey;\nborder-radius:4px; \npadding: 10px;\nmargin-bottom: 8px;\n`;\nexport const DeleteButton = styled.button`\nbackground-color: grey;\ncolor: white;\nborder: none;\nborder-radius: 4px;\npadding: 4px 8px;\ncursor: pointer;\ntransition: background-color .3s;\n\n&:hover {\n  background-color: red;\n}\n`;","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectShowContacts = createSelector(\n  [selectContacts, selectFilter],\n\n  (contacts, filter) => {\n    if (!filter || !filter.filter) {\n      return contacts;\n    }\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.filter.toLowerCase())\n    );\n  }\n);\n  \n","\nimport React from 'react'\nimport Box from '@mui/material/Box';\n\nimport CircularProgress from '@mui/material/CircularProgress';\n\n\n\nexport default function Loader() {\n  return (\n    <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center',  }}>\n      <CircularProgress />\n    </Box>\n  )\n}\n","import React, { useEffect } from 'react';\nimport { List, ListItem, Wrapper } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact, fetchContacts } from '../redux/contactsActions';\nimport { selectShowContacts, selectError, selectIsLoading } from 'components/redux/selectors';\nimport Loader from 'components/Loader/Loader';\nimport Button from '@mui/material/Button';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nexport const ContactList = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n  const show = useSelector(selectShowContacts);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleDeleteContact = (contactId) => {\n    if (window.confirm('Are you sure you want to delete this contact?')) {\n      dispatch(deleteContact(contactId));\n    }\n  };\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (error) {\n    return (\n      <Wrapper>\n        <p>Error: {error}</p>\n      </Wrapper>\n    );\n  }\n\n  if (show.length === 0) {\n    return (\n      <Wrapper>\n        <p>No contacts found.</p>\n      </Wrapper>\n    );\n  }\n\n  return (\n    <Wrapper>\n      <List>\n        {show.map((contact) => (\n          <ListItem key={contact.id}>\n            {contact.name} : {contact.number}\n            <Button onClick={() => handleDeleteContact(contact.id)} variant=\"outlined\" startIcon={<DeleteIcon />}>\n        Delete\n      </Button>\n          </ListItem>\n        ))}\n      </List>\n    </Wrapper>\n  );\n};\n\n\n","import styled from 'styled-components';\n\n\nexport const WrappFilter = styled.div`\nmargin-top:30px;\n`\nexport const FilterInput = styled.input`\noutline: none;\nwidth: 300px;\ndisplay:block;\nmargin:30px auto;\npadding: 8px;\nborder: 1px solid #ccc;\nborder-radius: 4px;\n`;\n\nexport const FilterTitle = styled.p`\ntext-align:center;\n\n`","import React from 'react';\nimport { FilterInput, FilterTitle, WrappFilter } from './Flter.styled';\nimport { useDispatch} from 'react-redux';\nimport { filterContact} from 'components/redux/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilterChange = (newFilterValue) => {\n    dispatch(filterContact(newFilterValue));\n  };\n\n  return (\n    <WrappFilter >\n      <FilterTitle>Find contact by name</FilterTitle>\n      <FilterInput onChange={event => handleFilterChange (event.target.value)} type=\"text\" name=\"filter\"\n\t />\n    </WrappFilter>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm'\nimport { ContactList } from 'components/ContactList/ContactList'\nimport { Filter } from 'components/Filter/Filter';\nimport { useAuth } from 'components/hooks';\nimport React from 'react'\n\nexport default function Contacts() {\n  const { user  } = useAuth();\n  return (\n    <div>\n      <h1 style={{textAlign: 'center'}}>Welcome {user.name} !</h1>\n      <ContactForm/>\n      <Filter/>\n      <ContactList/>\n      </div>\n  )\n}\n"],"names":["StyledFormik","styled","Form","_templateObject","_taggedTemplateLiteral","p","theme","colors","lightBlue","blue","Error","ErrorMessage","_templateObject2","red","FormField","Field","_templateObject3","AddButton","_templateObject4","contactSchema","Yup","shape","name","min","required","number","ContactForm","dispatch","useDispatch","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","addContact","resetForm","children","_jsxs","placeholder","component","type","Wrapper","List","ListItem","selectIsLoading","state","contacts","isLoading","selectError","error","selectShowContacts","createSelector","items","filter","contact","toLowerCase","includes","Loader","Box","sx","display","justifyContent","alignItems","CircularProgress","ContactList","useSelector","show","useEffect","fetchContacts","length","map","Button","onClick","contactId","id","window","confirm","deleteContact","variant","startIcon","DeleteIcon","WrappFilter","FilterInput","FilterTitle","Filter","onChange","event","newFilterValue","target","value","filterContact","Contacts","user","useAuth","style","textAlign"],"sourceRoot":""}